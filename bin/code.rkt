; Generated by SML -> Racket ðŸš€ compiler (`https://gitlab.com/seckmaster/atheris-swift/tree/sml`)

#lang racket

(define xs (list false false true))
xs
(define x1 (cond [(and (> (length xs) 1) (car xs)) (let ([tl (cdr xs)]) 1)]
                 [(and (> (length xs) 1) (not (car xs))) (let ([tl (cdr xs)]) 2)]))
x1

(define xss (list (cons false 10) (cons true 20) (cons false 30)))
xss
(define x2 (cond [(and (> (length xss) 1) (and (car (car xss)) (= 10 (cdr (car xss))))) (let ([tl (cdr xss)]) 1)]
                 [(and (> (length xss) 1) (and (not (car (car xss))) (= 10 (cdr (car xss))))) (let ([tl (cdr xss)]) 2)]))
x2
