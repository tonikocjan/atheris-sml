AstBindings [1:1, 7:11]:
  AstDatatypeBinding [1:1, 1:28]:
    -> typed: ('a) O
    AstIdentifierPattern [1:13, 1:14]:
      Name: O
    AstTypeBinding [1:10, 1:12]:
      -> typed: 'a
      AstIdentifierPattern [1:11, 1:12]:
        Name: a
      Type: '
    AstCase [1:17, 1:24]:
      -> typed: ('a) ('a) O
      AstIdentifierPattern [1:17, 1:18]:
        Name: J
      AstTypeName [1:22, 1:24]:
        -> typed: 'a
        Name: 'a
    AstCase [1:27, 1:28]:
      -> typed: ('a) O
      AstIdentifierPattern [1:27, 1:28]:
        Name: N
  AstFunBinding [2:1, 2:46]:
    -> typed: fn : ('a) ('a) O -> fn : fn : 'a -> 'Z -> ('Z) ('a) O
    AstIdentifierPattern [2:5, 2:6]:
      -> typed: fn : ('a) ('a) O -> fn : fn : 'a -> 'Z -> ('Z) ('a) O
      Name: m
    AstIdentifierPattern [2:7, 2:8]:
      -> typed: ('a) ('a) O
      Name: x
    AstAnonymousFunctionBinding [2:9, 2:46]:
      -> typed: fn : fn : 'a -> 'Z -> ('Z) ('a) O
      AstIdentifierPattern [2:9, 2:10]:
        -> typed: fn : 'a -> 'Z
        Name: f
      AstCaseExpression [2:13, 2:46]:
        -> typed: ('Z) ('a) O
        AstNameExpression [2:18, 2:19]:
          -> defined at:  [2:7, 2:8]:
          -> typed: ('a) ('a) O
          Name: x
        AstMatch [2:23, 2:46]:
          -> typed: ('a) ('a) O => ('Z) ('a) O
          AstRule [2:23, 2:36]:
            -> typed: ('a) ('a) O => ('Z) ('a) O
            AstIdentifierPattern [2:23, 2:24]:
              -> defined at:  [1:17, 1:24]:
              -> typed: ('a) ('a) O
              Name: J
            AstIdentifierPattern [2:25, 2:26]:
              -> typed: 'a
              Name: l
            AstFunctionCallExpression [2:30, 2:36]:
              -> defined at:  [1:17, 1:24]:
              -> typed: ('Z) ('a) O
              Function name: J
              AstFunctionCallExpression [2:33, 2:36]:
                -> defined at:  [2:9, 2:10]:
                -> typed: 'Z
                Function name: f
                AstNameExpression [2:35, 2:36]:
                  -> defined at:  [2:25, 2:26]:
                  -> typed: 'a
                  Name: l
          AstRule [2:40, 2:46]:
            -> typed: ('a) O => ('a) O
            AstIdentifierPattern [2:40, 2:41]:
              -> defined at:  [1:27, 1:28]:
              -> typed: ('a) O
              Name: N
            AstNameExpression [2:45, 2:46]:
              -> defined at:  [1:27, 1:28]:
              -> typed: ('a) O
              Name: N
  AstValBinding [4:1, 4:32]:
    -> typed: ('Z) ('a) O
    AstIdentifierPattern [4:5, 4:6]:
      -> typed: ('a) ('a) O
      Name: x
    AstAnonymousFunctionCall [4:9, 4:32]:
      -> typed: ('Z) ('a) O
      AstAnonymousFunctionBinding [4:19, 4:32]:
        -> typed: fn : int -> int
        AstIdentifierPattern [4:22, 4:23]:
          -> typed: int
          Name: x
        AstBinaryExpression `*` [4:27, 4:32]:
          -> typed: int
          AstNameExpression [4:27, 4:28]:
            -> defined at:  [4:22, 4:23]:
            -> typed: int
            Name: x
          AstNameExpression [4:31, 4:32]:
            -> defined at:  [4:22, 4:23]:
            -> typed: int
            Name: x
      AstFunctionCallExpression [4:9, 4:16]:
        -> defined at:  [2:1, 2:46]:
        -> typed: fn : fn : 'a -> 'Z -> ('Z) ('a) O
        Function name: m
        AstFunctionCallExpression [4:12, 4:16]:
          -> defined at:  [1:17, 1:24]:
          -> typed: ('a) ('a) O
          Function name: J
          AstConstantExpression [4:14, 4:16]:
            -> typed: int
            Value: 10
            Atom type: int
  AstValBinding [5:1, 7:11]:
    -> typed: 'a
    AstIdentifierPattern [5:1, 7:11]:
      -> typed: 'a
      Name: x1
    AstCaseExpression [5:1, 7:11]:
      -> typed: 'a
      AstNameExpression [5:6, 5:7]:
        -> defined at:  [4:5, 4:6]:
        -> typed: ('a) ('a) O
        Name: x
      AstMatch [6:3, 7:11]:
        -> typed: ('a) ('a) O => 'a
        AstRule [6:3, 6:11]:
          -> typed: ('a) ('a) O => 'a
          AstIdentifierPattern [6:3, 6:4]:
            -> defined at:  [1:17, 1:24]:
            -> typed: ('a) ('a) O
            Name: J
          AstIdentifierPattern [6:5, 6:6]:
            -> typed: 'a
            Name: x
          AstNameExpression [6:10, 6:11]:
            -> defined at:  [6:5, 6:6]:
            -> typed: 'a
            Name: x
        AstRule [7:5, 7:11]:
          -> typed: ('a) O => int
          AstIdentifierPattern [7:5, 7:6]:
            -> defined at:  [1:27, 1:28]:
            -> typed: ('a) O
            Name: N
          AstConstantExpression [7:10, 7:11]:
            -> typed: int
            Value: 0
            Atom type: int
